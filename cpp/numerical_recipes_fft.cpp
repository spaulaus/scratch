/// @file numerical_recipes_fft.cpp
/// @brief Computes an in place FFT for a data array.
/// @author S. V. Paulauskas
/// @date December 04, 2020
#include <algorithm>
#include <complex>
#include <iostream>

#include <cmath>

using namespace std;

///This function taken from https://www.drdobbs.com/cpp/a-simple-and-efficient-fft-implementatio/199500857?pgno=1 who
///   originally obtained it from Cooley-Tukey algorithm from Numerical Recipes in C++ [5], p.513.
void fft(double* data, unsigned long nn) {
    unsigned long n, mmax, m, j, istep, i;
    double wtemp, wr, wpr, wpi, wi, theta;
    double tempr, tempi;

    // reverse-binary reindexing
    n = nn << 1;
    j = 1;
    for (i = 1; i < n; i += 2) {
        if (j > i) {
            swap(data[j - 1], data[i - 1]);
            swap(data[j], data[i]);
        }
        m = nn;
        while (m >= 2 && j > m) {
            j -= m;
            m >>= 1;
        }
        j += m;
    };

    // here begins the Danielson-Lanczos section
    mmax = 2;
    while (n > mmax) {
        istep = mmax << 1;
        theta = -(2 * M_PI / mmax);
        wtemp = sin(0.5 * theta);
        wpr = -2.0 * wtemp * wtemp;
        wpi = sin(theta);
        wr = 1.0;
        wi = 0.0;
        for (m = 1; m < mmax; m += 2) {
            for (i = m; i <= n; i += istep) {
                j = i + mmax;
                tempr = wr * data[j - 1] - wi * data[j];
                tempi = wr * data[j] + wi * data[j - 1];

                data[j - 1] = data[i - 1] - tempr;
                data[j] = data[i] - tempi;
                data[i - 1] += tempr;
                data[i] += tempi;
            }
            wtemp = wr;
            wr += wr * wpr - wi * wpi;
            wi += wi * wpr + wtemp * wpi;
        }
        mmax = istep;
    }
}

int main() {
    static const size_t length = 256;
    double data[length] = {
            0.0, 0, 0.003936997703399615, 0, 0.0078739343832916, 0, 0.011810749017114198, 0, 0.015747380584197355, 0,
            0.01968376806670857, 0, 0.023619850450598636, 0, 0.02755556672654739, 0, 0.031490855890909344, 0,
            0.03542565694665925, 0, 0.03935990890433754, 0, 0.043293550782995675, 0, 0.04722652161114134, 0,
            0.05115876042768353, 0, 0.05509020628287741, 0, 0.05902079823926906, 0, 0.06295047537264001, 0,
            0.06687917677295152, 0, 0.0708068415452888, 0, 0.07473340881080472, 0, 0.07865881770766354, 0,
            0.08258300739198429, 0, 0.0865059170387838, 0, 0.09042748584291943, 0, 0.09434765302003167, 0,
            0.09826635780748624, 0, 0.10218353946531593, 0, 0.10609913727716201, 0, 0.11001309055121541, 0,
            0.11392533862115742, 0, 0.1178358208471, 0, 0.12174447661652571, 0, 0.1256512453452272, 0,
            0.1295560664782463, 0, 0.13345887949081256, 0, 0.1373596238892815, 0, 0.141258239212072, 0,
            0.14515466503060384, 0, 0.14904884095023405, 0, 0.15294070661119308, 0, 0.15683020168952047, 0,
            0.16071726589799978, 0, 0.16460183898709319, 0, 0.1684838607458751, 0, 0.1723632710029656, 0,
            0.17624000962746317, 0, 0.18011401652987657, 0, 0.18398523166305625, 0, 0.18785359502312513, 0,
            0.19171904665040865, 0, 0.1955815266303642, 0, 0.1994409750945097, 0, 0.2032973322213515, 0,
            0.20715053823731183, 0, 0.21100053341765518, 0, 0.21484725808741392, 0, 0.21869065262231346, 0,
            0.22253065744969633, 0, 0.22636721304944551, 0, 0.23020025995490712, 0, 0.23402973875381203, 0,
            0.23785559008919677, 0, 0.24167775466032373, 0, 0.24549617322359998, 0, 0.24931078659349595, 0,
            0.2531215356434625, 0, 0.2569283613068475, 0, 0.2607312045778114, 0, 0.2645300065122417, 0,
            0.26832470822866683, 0, 0.2721152509091684, 0, 0.27590157580029323, 0, 0.279683624213964, 0,
            0.28346133752838876, 0, 0.2872346571889697, 0, 0.2910035247092106, 0, 0.2947678816716236, 0,
            0.29852766972863426, 0, 0.3022828306034866, 0, 0.3060333060911458, 0, 0.30977903805920054, 0,
            0.3135199684487643, 0, 0.3172560392753749, 0, 0.32098719262989356, 0, 0.3247133706794022, 0,
            0.32843451566810034, 0, 0.33215056991819963, 0, 0.3358614758308185, 0, 0.33956717588687446, 0,
            0.343267612647976, 0, 0.34696272875731277, 0, 0.35065246694054436, 0, 0.3543367700066886, 0,
            0.35801558084900736, 0, 0.3616888424458923, 0, 0.36535649786174823, 0, 0.369018490247876, 0,
            0.37267476284335344, 0, 0.3763252589759151, 0, 0.3799699220628309, 0, 0.38360869561178307, 0,
            0.38724152322174155, 0, 0.39086834858383845, 0, 0.39448911548224086, 0, 0.3981037677950222, 0,
            0.40171224949503187, 0, 0.40531450465076385, 0, 0.40891047742722375, 0, 0.4125001120867941, 0,
            0.4160833529900982, 0, 0.4196601445968626, 0, 0.4232304314667783, 0, 0.42679415826035955, 0,
            0.4303512697398019, 0, 0.4339017107698384, 0, 0.4374454263185941, 0, 0.4409823614584391, 0,
            0.44451246136683986, 0, 0.44803567132720906, 0, 0.45155193672975363, 0, 0.45506120307232123, 0,
            0.458563415961245, 0, 0.46205852111218676, 0, 0.46554646435097824, 0, 0.46902719161446105, 0,
            0.47250064895132426, 0, 0.47596678252294106, 0, 0.479425538604203, 0};
    fft(data, length * 0.5);
    cout << "-----------BEGIN Raw Results-----------" << endl;
    for (auto val : data)
        cout << val << ", ";
    cout << endl << "-----------END Raw Results-----------" << endl << endl;

    cout << "-----------BEGIN Magnitude Calculation-----------" << endl;
    for (unsigned int i = 0; i < length - 1; i += 2)
        std::cout << std::abs(std::complex<double>(data[i], data[i + 1])) << ", ";
    cout << endl << "-----------END Magnitude Calculation-----------" << endl;
}
